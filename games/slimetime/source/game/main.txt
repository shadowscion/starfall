--@name games/slimetime/source/game/main
--@author shadowscion
--@client

local glib = glib

glib.game = { }

-- inputs
glib.game.inputs = {
    [79] = "enter",
    [80] = "enter",
    [81] = "pause",
    [89] = "left",
    [91] = "right",
    [88] = "up",
    [90] = "down",
}

-- helpers
local white = Color(255, 255, 255)
local black = Color(0, 0, 0)

local function getIndex(x, y)
    return x + (y - 1)*16
end

local function getX(index)
    return math.floor((index - 1) % 16) + 1
end

local function getY(index)
    return math.floor((index - 1) / 16) + 1
end

local function inrange(n, min, max)
    return n >= min and n <= max
end

local function outCubic(t, b, c, d)
    return c * (math.pow(t / d - 1, 3) + 1) + b
end

-- local game
function glib:onLocalGameStart()
    self.game.player = {
        x = math.random(7, 10),
        y = math.random(7, 10),
        dir = math.random(1, 4),
        col = math.random(1, 4),
        pos = Vector(),
        mat = Matrix(),
    }
    self.game.player.pos.x = self.game.player.x*32
    self.game.player.pos.y = self.game.player.y*32
    self.game.player.mat:setTranslation(self.game.player.pos)
    
    self.game.board = {}
    for n = 1, 256 do
        self.game.board[n] = 0
    end
    self.game.history = {
        {
            yLast = math.random(0, 3),
            sLast = math.random(1, 4),
        },
        {
            xLast = math.random(0, 3),
            sLast = math.random(1, 4),
        },
        {
            yLast = math.random(0, 3),
            sLast = math.random(1, 4),
        },
        {
            xLast = math.random(0, 3),
            sLast = math.random(1, 4),
        },
        qLast = math.random(1, 4)
    }
    
    self.game.scorenumber = 0
    self.game.scorestring = "000000"
    self.game.multiplier = 1
    self.game.pushspeed = 75
    self.game.pushcount = 0
    self.game.tick = 0
    
    self.game.gibs = {}
end

-- stream
function glib:onStreamStart()
    self.game.player = {
        x = 7,
        y = 7,
        dir = 1,
        col = 1,
        pos = Vector(),
        mat = Matrix(),
    }
    self.game.player.pos.x = self.game.player.x*32
    self.game.player.pos.y = self.game.player.y*32
    self.game.player.mat:setTranslation(self.game.player.pos)
    
    self.game.board = {}
    for n = 1, 256 do
        self.game.board[n] = 0
    end
    
    self.game.scorenumber = 0
    self.game.scorestring = "000000"
    self.game.multiplier = 1
    self.game.tick = 0
    
    self.game.gibs = {}
end

-- 
function glib:onGameover()
    if self.isNetworked then
        net.start("netGameover")
        net.send()
    end
    if self.engine.isdummy then
        self:onMenuQuit()
        return
    end
    self.engine.gameover = true
    self.engine.paused = true
    self.menu.focus = true
    self.menu.state = "paused"
    self.menu.option = 1
    self:resetMenuFlash()
end

-- background
local map = {
    9, 9, 9, 9, 9, 9, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3,
    1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3,
    1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3,
    1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3,
    0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0,
}

local key = {
    [1] = Color(200, 200, 200),
    [2] = Color(225, 225, 225),
    [3] = Color(200, 200, 200),
    [4] = Color(225, 225, 225),
    [5] = Color(127, 127, 127),
}

function glib:renderBackground()
    render.setMaterial(self.spritesheet)
    for n = 1, 256 do
        local x = getX(n)
        local y = getY(n)
        if map[n] ~= 0 and map[n] ~= 9 then
            local sprite = self.sprites["border"]
            render.setRGBA(45, 45, 45, 255)
            render.drawTexturedRectUVFast(x*32 - 32, y*32 - 32, 32, 32, sprite.u0, sprite.v0, sprite.u1, sprite.v1, true)
            local sprite = self.sprites["background"]
            render.setColor(key[map[n]])
            render.drawTexturedRectUVFast(x*32 - 32, y*32 - 32, 32, 32, sprite.u0, sprite.v0, sprite.u1, sprite.v1, true)
        else
            local sprite = self.sprites["background"]
            local rgb = (x + y) % 2 == 0 and 50 or 55
            render.setRGBA(rgb,rgb,rgb,255)
            render.drawTexturedRectUVFast(x*32 - 32, y*32 - 32, 32, 32, sprite.u0, sprite.v0, sprite.u1, sprite.v1, true)
            if map[n] ~= 9 then
                local sprite = self.sprites["dot"]
                render.setRGBA(rgb,rgb,rgb,255)
                render.drawTexturedRectUVFast(x*32 - 32, y*32 - 32, 32, 32, sprite.u0, sprite.v0, sprite.u1, sprite.v1, true)
            end
        end
    end
end

-- foreground
function glib:renderForeground()
    render.setMaterial(self.spritesheet)
    render.setRGBA(255, 255, 255, 255)
    for n = 1, 256 do
        if self.game.board[n] ~= 0 then
            local x = getX(n)
            local y = getY(n)
            local sprite = self.sprites[self.shapes[self.game.board[n]]]
            render.drawTexturedRectUVFast(x*32 - 32, y*32 - 32, 32, 32, sprite.u0, sprite.v0, sprite.u1, sprite.v1, true)
        end
    end
end

-- overlay
local font1 = render.createFont("Akbar", 32, 32, false, false, true, false, false, false)

function glib:renderOverlay()
    render.setMaterial(self.spritesheet)
    render.pushMatrix(self.game.player.mat)
    if self.game.player.attackInProgress then
        local t = math.abs(math.sin(outCubic(self.game.player.attackTime, 0, 1, 1)*180*(math.pi / 180)))
        local x = -32
        local y = -32
        local w = 32
        local h = 32
        if self.game.player.dir == 1 then 
            w = w + t*128
            x = x + 24 
        elseif self.game.player.dir == 3 then 
            w = w + t*128
            x = x + 8 - w
        elseif self.game.player.dir == 2 then 
            h = h + t*128
            y = y + 24
        elseif self.game.player.dir == 4 then 
            h = h + t*128
            y = y + 8 - h
        end
        local sprite = self.sprites[self.playerTrails[self.game.player.col][self.game.player.dir]]
        render.setRGBA(255, 255, 255, 225*t)
        render.drawTexturedRectUVFast(x, y, w, h, sprite.u0, sprite.v0, sprite.u1, sprite.v1, true)
    end    
    local sprite = self.sprites[self.playerColors[self.game.player.col][self.game.player.dir]]
    render.setColor(white)
    render.drawTexturedRectUVFast(-32, -32, 32, 32, sprite.u0, sprite.v0, sprite.u1, sprite.v1, true)
    render.popMatrix()
    
    if self.engine.desync then
        render.setFont("Default")
        render.setRGBA(255, 0, 0, 255)
        render.drawText(0, 512 - 32, "DESYNC")
    end
    if glib.debug and self.engine.type == "local" then
        render.setFont("Default")
        render.setRGBA(255, 0, 0, 255)
        render.drawText(64, 512 - 84, self.game.multiplier .. "\n" .. self.game.pushcount .. "\n" .. self.game.pushspeed )
    end
    
    self:drawGibs()
    
    render.setFont(font1)
    render.setColor(white)
    for i = 0, 5 do
        render.drawText(16 + i*32, 0, self.game.scorestring[i + 1], 1)
    end
end

-- player movement
function glib:setPlayerPos(x, y)
    self.game.player.x = x
    self.game.player.y = y
    self.game.player.pos.x = x*32
    self.game.player.pos.y = y*32
    self.game.player.mat:setTranslation(self.game.player.pos)
    self.engine.redraw.overlay = true
    self:sync("pos")
end

function glib:movePlayer(x, y)
    local x = math.clamp(self.game.player.x + x, 7, 10)
    local y = math.clamp(self.game.player.y + y, 7, 10)
    if self.game.player.x ~= x or self.game.player.y ~= y then
        self:setPlayerPos(x, y)
    end
end

function glib:turnPlayer(dir)
    local dir = math.clamp(dir, 1, 4)
    if self.game.player.dir ~= dir then
        self.game.player.dir = dir
        self.engine.redraw.overlay = true
        self:sync("dir")
    end
end

function glib:setPlayerColor(col)
    local col = math.clamp(col, 1, 4)
    if self.game.player.col ~= col then
        self.game.player.col = col
        self.engine.redraw.overlay = true
        self:sync("col")
    end    
end

function glib:setScore(num)
    self.game.scorenumber = num
    self.game.scorestring = string.format("%.6d", self.game.scorenumber)
    self.engine.redraw.overlay = true
    self:sync("score")
end

function glib:calculateScore(modifier, multiplier)
    local score = self.game.scorenumber + math.pow(modifier, 3)*50 + 50*modifier*multiplier
    if self.game.scorenumber ~= score then
        self:setScore(score)
    end
end

function glib:createGib(index)
    if self.game.board[index] == 0 then return end

    local x = getX(index)
    local y = getY(index)
        
    for i = 1, 3 do
        local dir = math.random(-45, 45)
        local gib = { 
            time = 0,
            matrix = Matrix(), 
            scl = Vector(1, 1, math.random(-1, 1)),
            pos = Vector(x*32 - 32, y*32 - 32), 
            ang = Angle(),
            sprite = self.sprites[self.shapes[self.game.board[index]]],
            dir = Angle(0, dir - 90, 0):getForward()*math.rand(300, 500),
            rot = dir*math.random(10, 50),
        }
        gib.matrix:setTranslation(gib.pos)

        table.insert(self.game.gibs, gib)    
    end
end

function glib:drawGibs()
    render.setMaterial(self.spritesheet)
    render.setColor(white)
    for i, gib in pairs(self.game.gibs) do
        render.pushMatrix(gib.matrix)
        render.drawTexturedRectUVFast(-6, -6, 12, 12, gib.sprite.u0, gib.sprite.v0, gib.sprite.u1, gib.sprite.v1, true)
        render.popMatrix()
    end
end

function glib:updateGibs(dt)
    local hasGibs = false
    for i, gib in pairs(self.game.gibs) do
        if gib.time == 1 then
            self.game.gibs[i] = nil
            hasGibs = true
            continue
        end
        
        gib.dir.y = gib.dir.y + 600*dt
        
        local x = gib.pos.x + gib.dir.x*dt
        local y = gib.pos.y + gib.dir.y*dt
        if x < 0 or x > 512 then
            gib.dir.x = -gib.dir.x*0.5
        end
        if y < 0 or y > 512 then
            gib.dir.y = -gib.dir.y*0.5
        end
                
        gib.pos.x = gib.pos.x + gib.dir.x*dt
        gib.pos.y = gib.pos.y + gib.dir.y*dt
        gib.ang.y = gib.ang.y + gib.rot*dt
        
        gib.scl.x = gib.time + (gib.scl.z > 0 and 1 or -1)
        gib.scl.y = gib.time + (gib.scl.z > 0 and 1 or -1)

        gib.matrix:setScale(gib.scl)
        gib.matrix:setTranslation(gib.pos)
        gib.matrix:setAngles(gib.ang)
        
        gib.time = math.min(gib.time + 0.5*dt, 1)
        
        hasGibs = true
    end
    if hasGibs then
        self.engine.redraw.overlay = true
    end
end
    
function glib:updatePlayerAttack(dt)
    if self.game.player.attackStage == 0 then
        self.game.player.attackTime = math.min(self.game.player.attackTime + 6*dt, 1)

        local x = getX(self.game.player.attackSwap or self.game.player.attackClearList[#self.game.player.attackClearList])
        local y = getY(self.game.player.attackSwap or self.game.player.attackClearList[#self.game.player.attackClearList])
        
        local time = outCubic(self.game.player.attackTime, 0, 1, 1)
        self.game.player.pos.x = ((1 - time)*self.game.player.x + x*time)*32
        self.game.player.pos.y = ((1 - time)*self.game.player.y + y*time)*32
        self.game.player.mat:setTranslation(self.game.player.pos)

        if self.game.player.attackTime == 1 then
            self:setScreenshakeMagnitude(#self.game.player.attackClearList)

            local multiplier = math.floor(self.game.scorenumber / 5000) + 1
            if self.game.multiplier ~= multiplier then
                self.game.multiplier = multiplier
            end
            if self.engine.type == "local" then
                self:calculateScore(#self.game.player.attackClearList, multiplier)
                self.game.pushcount = self.game.pushcount - #self.game.player.attackClearList
                self.game.pushspeed = 75 - math.min(math.max(0, 25 - multiplier), self.game.pushcount)
            end

            if self.game.player.dir == 1 then self.game.player.dir = 3 elseif self.game.player.dir == 3 then self.game.player.dir = 1 end
            if self.game.player.dir == 2 then self.game.player.dir = 4 elseif self.game.player.dir == 4 then self.game.player.dir = 2 end
            for _, clear in ipairs(self.game.player.attackClearList) do
                self:createGib(clear)
                self.game.board[clear] = 0
            end
            if self.game.player.attackSwap and self.game.board[self.game.player.attackSwap] then
                local tmp = self.game.player.col
                self.game.player.col = self.game.board[self.game.player.attackSwap] 
                self.game.board[self.game.player.attackSwap] = tmp
            end
            self.game.player.attackStage = 1
            self.engine.redraw.foreground = true
        end
    end
    if self.game.player.attackStage == 1 then
        self.game.player.attackTime = math.max(self.game.player.attackTime - 6*dt, 0)

        local x = getX(self.game.player.attackSwap or self.game.player.attackClearList[#self.game.player.attackClearList])
        local y = getY(self.game.player.attackSwap or self.game.player.attackClearList[#self.game.player.attackClearList])

        local time = outCubic(self.game.player.attackTime, 0, 1, 1)
        self.game.player.pos.x = ((1 - time)*self.game.player.x + x*time)*32
        self.game.player.pos.y = ((1 - time)*self.game.player.y + y*time)*32
        self.game.player.mat:setTranslation(self.game.player.pos)

        if self.game.player.attackTime == 0 then
            if self.game.player.dir == 1 then self.game.player.dir = 3 elseif self.game.player.dir == 3 then self.game.player.dir = 1 end
            if self.game.player.dir == 2 then self.game.player.dir = 4 elseif self.game.player.dir == 4 then self.game.player.dir = 2 end
            self.game.player.attackSwap = nil
            self.game.player.attackClearList = nil
            self.game.player.attackInProgress = false
            if self.engine.type == "local" then
                self:sync("board")
                self:sync("col")
            end
        end
    end
end

function glib:queuePlayerAttack()
    local attackClearList = {}
    local attackSwap
    if self.game.player.dir == 1 or self.game.player.dir == 3 then
        for gx = self.game.player.x, self.game.player.dir == 1 and 1 or 16, self.game.player.dir == 1 and -1 or 1 do
            local cell = self.game.board[getIndex(gx, self.game.player.y)]
            if inrange(cell, 1, 4) then
                if cell ~= self.game.player.col then
                    attackSwap = getIndex(gx, self.game.player.y)
                    break
                end
                table.insert(attackClearList, getIndex(gx, self.game.player.y))
            end
        end
    elseif self.game.player.dir == 2 or self.game.player.dir == 4 then
        for gy = self.game.player.y, self.game.player.dir == 2 and 1 or 16, self.game.player.dir == 2 and -1 or 1 do
            local cell = self.game.board[getIndex(self.game.player.x, gy)]
            if inrange(cell, 1, 4) then
                if cell ~= self.game.player.col then
                    attackSwap = getIndex(self.game.player.x, gy)
                    break
                end
                table.insert(attackClearList, getIndex(self.game.player.x, gy))
            end
        end
    end
    if attackSwap or #attackClearList > 0 then
        self.game.player.attackClearList = attackClearList
        self.game.player.attackSwap = attackSwap
        self.game.player.attackStage = 0
        self.game.player.attackTime = 0
        self.game.player.attackInProgress = true
        if self.engine.type == "local" then
            self:sync("attack")
        end
    end
end

-- board update
function glib:getNextPush()
    local qNext = self.game.history.qLast
    if self.game.player.attackInProgress then
        while qNext == self.game.history.qLast or qNext == self.game.player.direction do
            qNext = math.random(1, 4)
        end
    else
        while qNext == self.game.history.qLast do
            qNext = math.random(1, 4)
        end
    end

    local sNext
    if inrange(self.game.history[qNext].sLast, 1, 4) then
        if math.random(0, 1000) > 750 then
            sNext = self.game.history[qNext].sLast
        else
            if math.random(0, 1000) > 1000 then
                sNext = math.random(5, 7)
            else
                sNext = self.game.history[qNext].sLast
                while sNext == self.game.history[qNext].sLast do
                    sNext = math.random(1, 4)
                end
            end
        end
    else
        sNext = math.random(1, 4)
    end

    local xNext = self.game.history[qNext].xLast
    local yNext = self.game.history[qNext].yLast
    if math.random(0, 1000) > 250 then
        if xNext then
            while xNext == self.game.history[qNext].xLast do
                xNext = math.random(0, 3)
            end
        end
        if yNext then
            while yNext == self.game.history[qNext].yLast do
                yNext = math.random(0, 3)
            end
        end
    end

    return qNext, xNext, yNext, sNext
end

function glib:setNextPush()
    local qNext, xNext, yNext, sNext = self:getNextPush()
    
    self.game.pushcount = self.game.pushcount + 1

    self.game.history.qLast = qNext
    self.game.history[qNext].xNext = xNext
    self.game.history[qNext].yLast = yNext
    self.game.history[qNext].sLast = sNext

    if qNext == 1 then
        for x = 6, 1, -1 do
            local this =  self.game.board[getIndex(x, yNext + 7)]
            if this ~= 0 then
                self.game.board[getIndex(x + 1, yNext + 7)] = this
                if x + 1 > 6 then
                    self:onGameover()
                end
            end
        end
        self.game.board[getIndex(1, yNext + 7)] = sNext
    elseif qNext == 2 then
        for y = 6, 1, -1 do
            local this =  self.game.board[getIndex(xNext + 7, y)]
            if this ~= 0 then
                self.game.board[getIndex(xNext + 7, y + 1)] = this
                if y + 1 > 6 then
                    self:onGameover()
                end
            end
        end
        self.game.board[getIndex(xNext + 7, 1)] = sNext
    elseif qNext == 3 then
        for x = 11, 16 do
            local this =  self.game.board[getIndex(x, yNext + 7)]
            if this ~= 0 then
                self.game.board[getIndex(x - 1, yNext + 7)] = this
                if x - 1 < 11 then
                    self:onGameover()
                end
            end
        end
        self.game.board[getIndex(16, yNext + 7)] = sNext
    elseif qNext == 4 then
        for y = 11, 16 do
            local this =  self.game.board[getIndex(xNext + 7, y)]
            if this ~= 0 then
                self.game.board[getIndex(xNext + 7, y - 1)] = this
                if y - 1 < 11 then
                    self:onGameover()
                end
            end
        end
        self.game.board[getIndex(xNext + 7, 16)] = sNext
    end

    self:sync("board")
end

-- networking
function glib:sync(type)
    if not self.isNetworked or self.engine.type ~= "local" then return end
    if type == "pos" then
        net.start("pos")
        net.writeUInt(self.game.player.x, 8)
        net.writeUInt(self.game.player.y, 8)
        net.send()
        return
    end
    if type == "dir" then
        net.start("dir")
        net.writeUInt(self.game.player.dir, 8)
        net.send()
        return
    end
    if type == "col" then
        net.start("col")
        net.writeUInt(self.game.player.col, 8)
        net.send()
        return
    end
    if type == "score" then
        net.start("score")
        net.writeUInt(self.game.scorenumber, 32)
        net.send()
        return
    end
    if type == "board" then
        net.start("board")
        net.writeString(table.concat(self.game.board))
        net.send()
        return
    end
    if type == "attack" then
        net.start("attack")
        net.writeString(table.concat(self.game.board))
        net.send()
        return
    end
end

net.receive("pos", function(len)
    glib:setPlayerPos(net.readUInt(8), net.readUInt(8))
    glib.engine.desync = false
end)

net.receive("dir", function(len)
    glib:turnPlayer(net.readUInt(8))
    glib.engine.desync = false
end)

net.receive("col", function(len)
    glib:setPlayerColor(net.readUInt(8))
    glib.engine.desync = false
end)

net.receive("score", function(len)
    glib:setScore(net.readUInt(32))
    glib.engine.desync = false
end)

net.receive("board", function(len)
    local str = net.readString()
    for i = 1, 256 do
        glib.game.board[i] = tonumber(str[i])
    end
    glib.engine.redraw.foreground = true
    glib.engine.desync = false
end)

net.receive("attack", function(len)
    local str = net.readString()
    for i = 1, 256 do
        glib.game.board[i] = tonumber(str[i])
    end
    glib.engine.desync = false
    glib.engine.redraw.foreground = true
    glib:queuePlayerAttack()
end)

-- input update
function glib:gameInput(keyCode, keyName, force)
    if self.engine.paused then return end
    if self.game.player.attackInProgress then return end
    if keyName == "enter" then
        self:queuePlayerAttack()
        return
    end
    if keyName == "up" then
        if self.game.player.dir == 2 then
            self:movePlayer(0, -1)
        end
        self:turnPlayer(2)
        return
    end
    if keyName == "down" then
        if self.game.player.dir == 4 then
            self:movePlayer(0, 1)
        end
        self:turnPlayer(4)
        return
    end  
    if keyName == "left" then
        if self.game.player.dir == 1 then
            self:movePlayer(-1, 0)
        end
        self:turnPlayer(1)
        return
    end  
    if keyName == "right" then
        if self.game.player.dir == 3 then
            self:movePlayer(1, 0)
        end
        self:turnPlayer(3)
        return
    end  
end

-- update
function glib:onThink(dt, tick)
    if self.engine.isdummy then
        if math.random(0, 100) > 95 then
            local keys = { "enter", "enter", "left", "up", "right", "down" }
            if math.random(1, 4) >= 2 then
                self:gameInput(nil, keys[math.random(1, 6)])
            else
                self:gameInput(nil, keys[self.game.player.dir])
            end
        end
    end
    if self.engine.type == "local" then
        if self.engine.paused then
            return
        end
        self.game.tick = self.game.tick + 1
        if self.game.player.attackInProgress then
            self:updatePlayerAttack(dt)
            self.engine.redraw.overlay = true
        end
        if self.game.tick % self.game.pushspeed == 0 then
            self:setNextPush()
            self.engine.redraw.foreground = true
        end
        self:updateGibs(dt)
    end
    if self.engine.type == "stream" then
        self.game.tick = self.game.tick + 1
        if self.game.player.attackInProgress then
            self:updatePlayerAttack(dt)
            self.engine.redraw.overlay = true
        end
        self:updateGibs(dt)
    end
end


--@name super_mario/level_editor/gui/editor
--@author shadowscion
--@client

--[[
    sprite dictionary
]]
--@include super_mario/res/tiles.txt


--[[
    gui library
]]
--@include lib/lotus/init.txt


--[[
    editor elements
]]
--@include super_mario/level_editor/gui/elements/placement.txt
--@include super_mario/level_editor/gui/elements/selection.txt
--@include super_mario/level_editor/gui/elements/controlpanel.txt
--@include super_mario/level_editor/gui/elements/tile_grid.txt


--[[

]]
editor = {}
editor.tilesheet = require("super_mario/res/tiles.txt")


--[[

]]
require("lib/lotus/init.txt")

require("super_mario/level_editor/gui/elements/tile_grid.txt")
require("super_mario/level_editor/gui/elements/placement.txt")
require("super_mario/level_editor/gui/elements/selection.txt")
require("super_mario/level_editor/gui/elements/controlpanel.txt")


--[[

]]
editor.menu = lotus.CreateMenu()
editor.debug = false

editor.menu:AddContext("grid_inactive", editor.debug)
editor.menu:AddContext("grid_active", editor.debug)
editor.menu:AddContext("controlpanel", editor.debug)
editor.menu:AddContext("menu", editor.debug)
editor.menu:AddContext("overlay", editor.debug)


--[[

]]
timer.create("invalidate", 0.05, 0, function()
    if editor.tilesheet.texture.isLoaded then
        timer.remove("invalidate")
        timer.simple(1, function()
            editor.menu:InvalidateContext()
        end)
    end
end)


--[[

]]
editor.resetChunkMap()

editor.placement = lotus.CreateElement("placement", editor.menu, "menu")
editor.selection = lotus.CreateElement("selection", editor.menu, "menu")
editor.controlpanel = lotus.CreateElement("controlpanel", editor.menu, "controlpanel")

editor.menu:InvalidateContext()

for _, context in pairs(editor.menu.contexts) do
    for _, element in pairs(context.elements) do
        element:SetSkin(lotus.skins["green"])
    end
end

---- forward and backward reaching inverse kinematics
--@name fabrik
--@author
--@server

--[[
]]
local function holo(pos)
    return holograms.create(pos or Vector(), Angle(), "models/sprops/cuboids/height06/size_1/cube_6x6x6.mdl", Vector(1, 1, 1))
end

--[[
]]
local fabrik_chain = class("chain")

function fabrik_chain:initialize(bones, makeEnts)
    self.count = #bones
    self.dists = {}
    self.dist  = 0
    for i = 1, self.count - 1 do
        local r = (bones[i] - bones[i + 1]):getLength()
        self.dists[i] = r
        self.dist = self.dist + r
    end
    self.bones  = bones
    self.origin = bones[1] * 1
    self.target = bones[self.count] * 1
    if makeEnts then
        self.ents = {}
        for i = 1, self.count do
            self.ents[i] = holo(bones[i])
            self.ents[i]:setColor(Color(94, 94, 94))
        end
        self.ents[1]:setColor(Color(0,0,255))
        self.ents[self.count]:setColor(Color(0, 255, 0))
    end
end
function fabrik_chain:iterateBackward()
    self.bones[self.count] = self.target
    for i = self.count - 1, 1, -1 do
        local r = self.bones[i + 1] - self.bones[i]
        local l = self.dists[i] / r:getLength()
        self.bones[i] = (1 - l) * self.bones[i + 1] + l * self.bones[i]
    end
end
function fabrik_chain:iterateForward()
    self.bones[1] = self.origin
    for i = 1, self.count - 1 do
        local r = self.bones[i + 1] - self.bones[i]
        local l = self.dists[i] / r:getLength()
        self.bones[i + 1] = (1 - l) * self.bones[i] + l * self.bones[i + 1]
    end
end
function fabrik_chain:solve()
    local distance = (self.bones[1] - self.target):getLength()
    if distance > self.dist then
        for i = 1, self.count - 1 do
            local r = self.target - self.bones[i]
            local l = self.dists[i] / r:getLength()
            self.bones[i + 1] = (1 - l) * self.bones[i] + l * self.target
        end
    else
        local diff = (self.bones[self.count] - self.target):getLength()
        if diff > 0.1 then
            self:iterateBackward()
            self:iterateForward()
            self:updateEnts()
        end
    end
   
end
function fabrik_chain:updateEnts()
    if not self.ents then return end
    for i = 1, self.count do
        self.ents[i]:setPos(self.bones[i])
    end
end
function fabrik_chain:setTarget(target)
    self.target = target
end






--[[
]]
local joints = {}
for i = 1,50 do 
    joints[i] = chip():localToWorld(Vector(32*(i - 1),0,0)) 
end
local test = fabrik_chain:new(joints, true)


hook.add("think", "thinktest", function()
    test:setTarget(chip():getPos())
    test:solve()
end)




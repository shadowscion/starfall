---- forward and backward reaching inverse kinematics
--@name fabrik
--@author
--@server

local fabrik = {}
fabrik.__index = fabrik

function fabrik.new(joints, target)
    local self = setmetatable({}, fabrik)
    
    local lengths = {}
    for i = 1, #joints - 1 do
        lengths[i] = (joints[i] - joints[i + 1]):getLength()
    end
    
    self.n = #joints
    self.tolerance = 0.1
    self.target = target
    self.joints = joints
    self.lengths = lengths
    self.origin = Vector(joints[1].x,joints[1].y,joints[1].z)
    self.totallength = 0
    for i = 1, #lengths do
        self.totallength = self.totallength + lengths[i]
    end

    self.holos = {}
    for i = 1, #joints do
        self.holos[i] = holograms.create(joints[i], Angle(), "models/sprops/cuboids/height06/size_1/cube_6x6x6.mdl", Vector(1, 1, 1))
    end
    
    return self
end
function fabrik:backward()
    self.joints[self.n] = self.target
    for i = self.n - 1, 1, -1 do
        local r = self.joints[i + 1] - self.joints[i]
        local l = self.lengths[i] / r:getLength()
        self.joints[i] = (1 - l) * self.joints[i + 1] + l * self.joints[i]
    end
end
function fabrik:forward()
    self.joints[1] = self.origin
    for i = 1, self.n - 1 do
        local r = self.joints[i + 1] - self.joints[i]
        local l = self.lengths[i] / r:getLength()
        self.joints[i + 1] = (1 - l) * self.joints[i] + l * self.joints[i + 1]
    end
end

function fabrik:solve()
    local distance = (self.joints[1] - self.target):getLength()
    if distance > self.totallength then
        for i = 1, self.n - 1 do
            local r = self.target - self.joints[i]
            local l = self.lengths[i] / r:getLength()
            self.joints[i + 1] = (1 - l) * self.joints[i] + l * self.target
        end
    else
        local bcount = 0
        local diff = (self.joints[self.n] - self.target):getLength()
        while diff > self.tolerance do
            self:backward()
            self:forward()
            diff = (self.joints[self.n] - self.target):getLength()
            bcount = bcount + 1
            if bcount > 10 then
                break
            end
        end
    end
end
function fabrik:draw()
    for i = 1, #self.joints do
        self.holos[i]:setPos(self.joints[i])
    end
end




local joints = {}
for i = 1,50 do 
    joints[i] = chip():localToWorld(Vector(32*(i - 1),0,0)) 
end

local test = fabrik.new(joints, chip():localToWorld(Vector(100,0,0)))

timer.create("test", 60/1000, 0, function()
    test.target = chip():getPos()
    test:solve()
    test:draw()
end)
